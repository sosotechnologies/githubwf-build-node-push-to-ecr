name: Argo CD GitOps CI/CD

on:
  push:
    branches:
      - main

jobs:
  build:
    name: Build and Push the image
    runs-on: ubuntu-latest

    steps:
    - name: Check out code
      uses: actions/checkout@v2

    - name: Bump version
      id: bump_version
      run: |
        chmod +x bump_version.sh && ./bump_version.sh
        new_version=$(cat VERSION)
        echo "::set-output name=new_version::$new_version"

    - name: Commit new version
      run: |
        git config --global user.name 'sosotechnologies'
        git config --global user.email 'sosotech2000@gmail.com'
        git add VERSION
        git commit -m "Bump version to ${{ steps.bump_version.outputs.new_version }}"
        git push origin main

    - name: Build the Docker image
      run: |
        docker build -t ghcr.io/${{ github.repository }}/go-app:${{ steps.bump_version.outputs.new_version }} .

    - name: Push the Docker image to GitHub Container Registry
      run: |
        echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin
        docker push ghcr.io/${{ github.repository }}/go-app:${{ steps.bump_version.outputs.new_version }}
        docker tag ghcr.io/${{ github.repository }}/go-app:${{ steps.bump_version.outputs.new_version }} ghcr.io/${{ github.repository }}/go-app:latest
        docker push ghcr.io/${{ github.repository }}/go-app:latest

  deploy:
    name: Deploy to Argo CD
    runs-on: ubuntu-latest
    needs: build

    steps:
    - name: Check out code
      uses: actions/checkout@v2

    - name: Update WorkflowTemplate with Version
      run: |
        version=$(cat VERSION)
        sed -i "s/value: \"latest\"/value: \"$version\"/g" WorkflowTemplate.yaml

    - name: Deploy to Argo CD
      run: chmod +x deploy.sh && ./deploy.sh

  release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: build

    steps:
    - name: Check out code
      uses: actions/checkout@v2

    - name: Ensure Unique Tag
      id: ensure_unique_tag
      run: |
        version=$(cat VERSION)
        tag_name="v$version"
        if git rev-parse "refs/tags/$tag_name" >/dev/null 2>&1; then
          echo "Tag $tag_name already exists."
          version=$(echo $version | awk -F. '{$NF = $NF + 1;} 1' | sed 's/ /./g')
          echo $version > VERSION
          git add VERSION
          git commit -m "Bump version to $version"
          git push origin main
          tag_name="v$version"
        fi
        echo "::set-output name=tag_name::$tag_name"

    - name: Create and Push Tag
      run: |
        tag_name=${{ steps.ensure_unique_tag.outputs.tag_name }}
        git tag $tag_name
        git push origin $tag_name

    - name: Create GitHub Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.ensure_unique_tag.outputs.tag_name }}
        release_name: Release ${{ steps.ensure_unique_tag.outputs.tag_name }}
        body: |
          Release version ${{ steps.ensure_unique_tag.outputs.tag_name }}
        draft: false
        prerelease: false



# name: Argo CD GitOps CI/CD

# on:
#   push:
#     branches:
#       - main

# jobs:
#   build:
#     name: Build and Push the image
#     runs-on: ubuntu-latest

#     steps:
#     - name: Check out code
#       uses: actions/checkout@v2

#     - name: Bump version
#       id: bump_version
#       run: |
#         chmod +x bump_version.sh && ./bump_version.sh
#         new_version=$(cat VERSION)
#         echo "::set-output name=new_version::$new_version"

#     - name: Commit new version
#       run: |
#         git config --global user.name 'sosotechnologies'
#         git config --global user.email 'sosotech2000@gmail.com'
#         git add VERSION
#         git commit -m "Bump version to ${{ steps.bump_version.outputs.new_version }}"
#         git push origin main

#     - name: Build the Docker image
#       run: |
#         docker build -t ghcr.io/${{ github.repository }}/go-app:${{ steps.bump_version.outputs.new_version }} .

#     - name: Push the Docker image to GitHub Container Registry
#       run: |
#         echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin
#         docker push ghcr.io/${{ github.repository }}/go-app:${{ steps.bump_version.outputs.new_version }}
#         docker tag ghcr.io/${{ github.repository }}/go-app:${{ steps.bump_version.outputs.new_version }} ghcr.io/${{ github.repository }}/go-app:latest
#         docker push ghcr.io/${{ github.repository }}/go-app:latest

#   deploy:
#     name: Deploy to Argo CD
#     runs-on: ubuntu-latest
#     needs: build

#     steps:
#     - name: Check out code
#       uses: actions/checkout@v2

#     - name: Update WorkflowTemplate with Version
#       run: |
#         version=$(cat VERSION)
#         sed -i "s/value: \"latest\"/value: \"$version\"/g" WorkflowTemplate.yaml

#     - name: Deploy to Argo CD
#       run: chmod +x deploy.sh && ./deploy.sh

#   release:
#     name: Create GitHub Release
#     runs-on: ubuntu-latest
#     needs: build

#     steps:
#     - name: Check out code
#       uses: actions/checkout@v2

#     - name: Tag the release
#       run: |
#         git tag v${{ steps.bump_version.outputs.new_version }}
#         git push origin v${{ steps.bump_version.outputs.new_version }}
      
#     - name: Create GitHub Release
#       id: create_release
#       uses: actions/create-release@v1
#       env:
#         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#       with:
#         tag_name: v${{ steps.bump_version.outputs.new_version }}
#         release_name: Release v${{ steps.bump_version.outputs.new_version }}
#         body: |
#           Release version ${{ steps.bump_version.outputs.new_version }}
#         draft: false
#         prerelease: false


# name: Argo CD GitOps CI/CD

# on:
#   push:
#     branches:
#       - main

# jobs:
#   build:
#     name: Build and Push the image
#     runs-on: ubuntu-latest
    
#     steps:
#     - name: Check out code
#       uses: actions/checkout@v2

#     - name: Read version
#       id: get_version
#       run: |
#         version=$(cat VERSION)
#         echo "::set-output name=version::$version"

#     - name: Build the Docker image
#       run: |
#         docker build -t ghcr.io/${{ github.repository }}/go-app:${{ steps.get_version.outputs.version }} .

#     - name: Push the Docker image to GitHub Container Registry
#       run: |
#         echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin
#         docker push ghcr.io/${{ github.repository }}/go-app:${{ steps.get_version.outputs.version }}
#         docker tag ghcr.io/${{ github.repository }}/go-app:${{ steps.get_version.outputs.version }} ghcr.io/${{ github.repository }}/go-app:latest
#         docker push ghcr.io/${{ github.repository }}/go-app:latest

#   deploy:
#     name: Deploy to Argo CD
#     runs-on: ubuntu-latest
#     needs: build

#     steps:
#     - name: Check out code
#       uses: actions/checkout@v2

#     - name: Update WorkflowTemplate with Version
#       run: |
#         version=$(cat VERSION)
#         sed -i "s/value: \"latest\"/value: \"$version\"/g" WorkflowTemplate.yaml
    
#     - name: Deploy to Argo CD
#       run: chmod +x deploy.sh && ./deploy.sh

#   release:
#     name: Create GitHub Release
#     runs-on: ubuntu-latest
#     needs: build

#     steps:
#     - name: Check out code
#       uses: actions/checkout@v2

#     - name: Bump version
#       id: bump_version
#       run: |
#         chmod +x bump_version.sh && ./bump_version.sh
#         new_version=$(cat VERSION)
#         echo "::set-output name=new_version::$new_version"

#     - name: Commit new version
#       run: |
#         git config --global user.name 'sosotechnologies'
#         git config --global user.email 'sosotech2000@gmail.com'
#         git add VERSION
#         git commit -m "Bump version to ${{ steps.bump_version.outputs.new_version }}"
#         git push origin main

#     - name: Tag the release
#       run: |
#         git tag v${{ steps.bump_version.outputs.new_version }}
#         git push origin v${{ steps.bump_version.outputs.new_version }}
      
#     - name: Create GitHub Release
#       id: create_release
#       uses: actions/create-release@v1
#       env:
#         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#       with:
#         tag_name: v${{ steps.bump_version.outputs.new_version }}
#         release_name: Release v${{ steps.bump_version.outputs.new_version }}
#         body: |
#           Release version ${{ steps.bump_version.outputs.new_version }}
#         draft: false
#         prerelease: false

